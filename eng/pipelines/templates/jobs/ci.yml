parameters:
  - name: ServiceDirectory
    type: string
    default: ''
  - name: Artifacts
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: BeforePublishSteps
    type: object
    default: []
  - name: TestMarkArgument
    type: string
    default: ''
  - name: BeforeTestSteps
    type: object
    default: []
  - name: AfterTestSteps
    type: object
    default: []
  - name: BuildTargetingString
    type: string
    default: 'azure-*'
  - name: TestTimeoutInMinutes
    type: number
    default: 60
  - name: ToxEnvParallel
    type: string
    default: '--tenvparallel'
  - name: InjectedPackages
    type: string
    default: ''
  - name: BuildDocs
    type: boolean
    default: true
  - name: DevFeedName
    type: string
    default: 'public/azure-sdk-for-python'
  - name: MatrixConfigs
    type: object
  - name: MatrixFilters
    type: object
    default: []
  - name: MatrixReplace
    type: object
    default: []
  - name: VerifyAutorest
    type: boolean
    default: false
  - name: ValidateFormatting
    type: boolean
    default: false
  - name: UnsupportedToxEnvironments
    type: string
    default: ''
  - name: TestProxy
    type: boolean
    default: false
  - name: GenerateApiReviewForManualOnly
    type: boolean
    default: false
  - name: AdvancedBuild
    type: boolean
    default: false

jobs:
  
  - ${{ if eq(parameters['AdvancedBuild'], false) }}:
    - job: 'Build'
      timeoutInMinutes: 90

      pool:
        name: azsdk-pool-mms-ubuntu-2004-1es-pt
        vmImage: azsdk-pool-mms-ubuntu-2004-1espt
        os: linux

      steps:
      - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml@self
        parameters:
          BuildTargetingString: ${{ parameters.BuildTargetingString }}

      - template: ../steps/build-package-artifacts.yml@self
        parameters:
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
          TestPipeline: ${{ parameters.TestPipeline }}
          Artifacts: ${{ parameters.Artifacts }}

  - ${{ if eq(parameters['AdvancedBuild'], true) }}:
    - job: 'Build'
      timeoutInMinutes: 90

      strategy:
        matrix:
          Linux:
            imageName: 'azsdk-pool-mms-ubuntu-2004-1espt'
            poolName: 'azsdk-pool-mms-ubuntu-2004-1es-pt'
            ArtifactName: 'linux'
            os: linux
          Windows:
            imageName: 'azsdk-pool-mms-win-2022-1espt'
            poolName: 'azsdk-pool-mms-win-2022-1es-pt'
            ArtifactName: 'windows'
            os: windows
          Mac:
            imageName: 'macos-11'
            poolName: 'Azure Pipelines'
            ArtifactName: 'mac'
            os: macos

      pool:
        name: $(poolName)
        vmImage: $(imageName)
        os: $(os)

      steps:
      - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml@self
        parameters:
          BuildTargetingString: ${{ parameters.BuildTargetingString }}

      - template: ../steps/build-package-artifacts.yml@self
        parameters:
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
          TestPipeline: ${{ parameters.TestPipeline }}
          Artifacts: ${{ parameters.Artifacts }}
          ArtifactSuffix: $(ArtifactName)

    - job: 'CoalesceBuildArtifacts'
      displayName: Combine Built Artifacts
      dependsOn: 
        - 'Build'
      timeoutInMinutes: 90

      pool:
        name: azsdk-pool-mms-ubuntu-2004-general
        vmImage: MMSUbuntu20.04

      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: 'packages_windows'
          targetPath: $(Build.ArtifactStagingDirectory)/packages

      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: 'packages_mac'
          targetPath: $(Build.ArtifactStagingDirectory)/packages

      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: 'packages_linux'
          targetPath: $(Build.ArtifactStagingDirectory)/packages

      - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
        parameters:
          ArtifactPath: '$(Build.ArtifactStagingDirectory)/packages'
          ArtifactName: 'packages'

  - job: 'Build_Extended'
    displayName: Build Extended
    dependsOn: 
      - 'Build'
      - ${{ if eq(parameters['AdvancedBuild'], true) }}:
        - 'CoalesceBuildArtifacts'
    timeoutInMinutes: 90

    pool:
      name: azsdk-pool-mms-ubuntu-2004-1es-pt
      vmImage: azsdk-pool-mms-ubuntu-2004-1espt
      os: linux

    steps:
    - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml
      parameters:
        BuildTargetingString: ${{ parameters.BuildTargetingString }}

    - template: ../steps/build-extended-artifacts.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
        BuildDocs: ${{ parameters.BuildDocs }}
        TestPipeline: ${{ parameters.TestPipeline }}
        Artifacts: ${{ parameters.Artifacts }}

  - job: 'Analyze'
    condition: and(succeededOrFailed(), ne(variables['Skip.Analyze'], 'true'))

    timeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}

    dependsOn:
      - 'Build_Extended'

    pool:
      name: azsdk-pool-mms-ubuntu-2004-1es-pt
      vmImage: azsdk-pool-mms-ubuntu-2004-1espt
      os: linux

    steps:
    - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml
      parameters:
        BuildTargetingString: ${{ parameters.BuildTargetingString }}

    - template: /eng/common/pipelines/templates/steps/check-spelling.yml
      parameters:
        ContinueOnError: false

    - template: /eng/common/pipelines/templates/steps/verify-links.yml
      parameters:
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          Directory: ''
          Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)
        ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
          Directory: sdk/${{ parameters.ServiceDirectory }}
        CheckLinkGuidance: $true

    - template: ../steps/analyze.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        AdditionalTestArgs: '--wheel_dir="$(Build.ArtifactStagingDirectory)"'
        TestPipeline: ${{ parameters.TestPipeline }}
        Artifacts: ${{ parameters.Artifacts }}
        VerifyAutorest: ${{ parameters.VerifyAutorest }}
        ValidateFormatting: ${{ parameters.ValidateFormatting }}
        GenerateApiReviewForManualOnly: ${{ parameters.GenerateApiReviewForManualOnly }}

  - template: /eng/common/pipelines/templates/jobs/archetype-sdk-tests-generate.yml
    parameters:
      JobTemplatePath: /eng/pipelines/templates/jobs/ci.tests.yml
      GenerateJobName: generate_linux_matrix
      OsVmImage: azsdk-pool-mms-ubuntu-2004-1espt
      Pool: azsdk-pool-mms-ubuntu-2004-1es-pt
      DependsOn:
        - 'Build'
        - ${{ if eq(parameters['AdvancedBuild'], true) }}:
          - 'CoalesceBuildArtifacts'
      MatrixConfigs:      
        - Name: Python_ci_test_base
          Path: eng/pipelines/templates/stages/platform-matrix-linux-only.json
          Selection: sparse
          GenerateVMJobs: true
      MatrixFilters: ${{ parameters.MatrixFilters }}
      MatrixReplace: ${{ parameters.MatrixReplace }}
      CloudConfig:
        Cloud: Public
      AdditionalParameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestPipeline: ${{ parameters.TestPipeline }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        BeforeTestSteps: ${{ parameters.BeforeTestSteps }}
        AfterTestSteps: ${{ parameters.AfterTestSteps }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        TestTimeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}
        ToxEnvParallel: ${{ parameters.ToxEnvParallel }}
        InjectedPackages: ${{ parameters.InjectedPackages }}
        UnsupportedToxEnvironments: ${{ parameters.UnsupportedToxEnvironments }}
        TestProxy: ${{ parameters.TestProxy }}
        OS: linux

  - template: /eng/common/pipelines/templates/jobs/archetype-sdk-tests-generate.yml
    parameters:
      JobTemplatePath: /eng/pipelines/templates/jobs/ci.tests.yml
      GenerateJobName: generate_mac_matrix
      OsVmImage: azsdk-pool-mms-ubuntu-2004-1espt
      Pool: azsdk-pool-mms-ubuntu-2004-1es-pt
      DependsOn:
        - 'Build'
        - ${{ if eq(parameters['AdvancedBuild'], true) }}:
          - 'CoalesceBuildArtifacts'
      MatrixConfigs:      
        - Name: Python_ci_test_base
          Path: eng/pipelines/templates/stages/platform-matrix-mac-only.json
          Selection: sparse
          GenerateVMJobs: true
      MatrixFilters: ${{ parameters.MatrixFilters }}
      MatrixReplace: ${{ parameters.MatrixReplace }}
      CloudConfig:
        Cloud: Public
      AdditionalParameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestPipeline: ${{ parameters.TestPipeline }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        BeforeTestSteps: ${{ parameters.BeforeTestSteps }}
        AfterTestSteps: ${{ parameters.AfterTestSteps }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        TestTimeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}
        ToxEnvParallel: ${{ parameters.ToxEnvParallel }}
        InjectedPackages: ${{ parameters.InjectedPackages }}
        UnsupportedToxEnvironments: ${{ parameters.UnsupportedToxEnvironments }}
        TestProxy: ${{ parameters.TestProxy }}
        OS: macOS

  - template: /eng/common/pipelines/templates/jobs/archetype-sdk-tests-generate.yml
    parameters:
      JobTemplatePath: /eng/pipelines/templates/jobs/ci.tests.yml
      GenerateJobName: generate_windows_matrix
      OsVmImage: azsdk-pool-mms-ubuntu-2004-1espt
      Pool: azsdk-pool-mms-ubuntu-2004-1es-pt
      DependsOn:
        - 'Build'
        - ${{ if eq(parameters['AdvancedBuild'], true) }}:
          - 'CoalesceBuildArtifacts'
      MatrixConfigs:      
        - Name: Python_ci_test_base
          Path: eng/pipelines/templates/stages/platform-matrix-windows-only.json
          Selection: sparse
          GenerateVMJobs: true
      MatrixFilters: ${{ parameters.MatrixFilters }}
      MatrixReplace: ${{ parameters.MatrixReplace }}
      CloudConfig:
        Cloud: Public
      AdditionalParameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestPipeline: ${{ parameters.TestPipeline }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        BeforeTestSteps: ${{ parameters.BeforeTestSteps }}
        AfterTestSteps: ${{ parameters.AfterTestSteps }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        TestTimeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}
        ToxEnvParallel: ${{ parameters.ToxEnvParallel }}
        InjectedPackages: ${{ parameters.InjectedPackages }}
        UnsupportedToxEnvironments: ${{ parameters.UnsupportedToxEnvironments }}
        TestProxy: ${{ parameters.TestProxy }}
        OS: windows

  # - template: /eng/common/pipelines/templates/jobs/archetype-sdk-tests-generate.yml
  #   parameters:
  #     JobTemplatePath: /eng/pipelines/templates/jobs/regression.yml
  #     OsVmImage: azsdk-pool-mms-ubuntu-2004-1espt
  #     Pool: azsdk-pool-mms-ubuntu-2004-1es-pt
  #     GenerateJobName: generate_regression_matrix
  #     SparseCheckoutPaths: [ "scripts/", "sdk/", "tools/azure-sdk-tools/" ]
  #     MatrixConfigs:
  #         - Name: Python_regression_envs
  #           Path: eng/pipelines/templates/stages/regression-job-matrix.json
  #           Selection: sparse
  #           GenerateVMJobs: true
  #     PreGenerationSteps:
  #       - pwsh: |
  #           python -m pip install "./tools/azure-sdk-tools[build]"
  #         displayName: 'Prep Environment'
  #       - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml
  #         parameters:
  #           BuildTargetingString: ${{ parameters.BuildTargetingString }}
  #       - task: PythonScript@0
  #         displayName: 'Ensure service coverage'
  #         inputs:
  #           scriptPath: '$(Build.SourcesDirectory)/scripts/devops_tasks/update_regression_services.py'
  #           arguments: >-
  #             "$(TargetingString)"
  #             --service="${{ parameters.ServiceDirectory }}"
  #             --json=$(Build.SourcesDirectory)/eng/pipelines/templates/stages/regression-job-matrix.json
  #     CloudConfig:
  #       Cloud: Public
  #     DependsOn:
  #       - 'Build'
  #       - ${{ if eq(parameters['AdvancedBuild'], true) }}:
  #         - 'CoalesceBuildArtifacts'
  #     AdditionalParameters:
  #       BuildTargetingString: ${{ parameters.BuildTargetingString }}
  #       ServiceDirectory: ${{ parameters.ServiceDirectory }}
  #       TestTimeoutInMinutes: 90
